{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\Project\\\\Pdairy\\\\frontend\\\\src\\\\page\\\\page-com\\\\graphunion.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport './graph.css';\nimport moment from 'moment';\nvar users = [{\n  label: 'January',\n  predicter: 41\n}, {\n  label: 'February',\n  predicter: 79\n}, {\n  label: 'March',\n  predicter: 57\n}, {\n  label: 'April',\n  sumweight: 0,\n  predicter: 47\n}, {\n  label: 'May',\n  sumweight: 41,\n  predicter: 63\n}, {\n  label: 'June',\n  sumweight: 47,\n  predicter: 71\n}];\nexport default function Graphunion() {\n  // const [users, setUsers] = useState([]);\n  // const numCols = 305;\n  // const colSums = new Array(numCols).fill(0);\n\n  // const fetchUserData = () => {\n  //   fetch(\"../api/getMilkRecords/\")\n  //     .then(async (res) => {\n  //       const milkpercow = await res.json();\n  //       const arrmilk = new Array(10); // Create an array with 10 rows\n  //       for (let i = 0; i < 10; i++) {\n  //         arrmilk[i] = new Array(); // For each row, create an array with no initial columns\n  //       }\n\n  //       let a = moment(\"09-01-2023 +0000\", \"MM-DD-YYYY Z\").valueOf();\n  //       let b = moment.duration(a, 'milliseconds');\n  //       let starto = Math.floor(b.asDays());\n\n  //       for (let i = 0; i < milkpercow.length; i++) {\n  //         let rower = milkpercow[i].cowID;\n  //         if (!Array.isArray(arrmilk[rower])) {\n  //           arrmilk[rower] = []; // Initialize the row if it's not already an array\n  //         }\n  //         const dmy = moment(milkpercow[i].timestamp).format(\"MM-DD-YYYY\");\n  //         let mill = moment(dmy, \"MM-DD-YYYY\").valueOf();\n  //         let duration = moment.duration(mill, 'milliseconds');\n  //         let coler = Math.floor(duration.asDays()) - starto;\n  //         arrmilk[rower][coler] = milkpercow[i].weight;\n  //       }\n\n  //       const prediction = new Array(10).fill(0).map(() => []);\n  //       arrmilk.forEach((milkData, index) => {\n  //         fetch(\"../ai/predict_milk\", {\n  //           method: \"POST\",\n  //           headers: {\n  //             'Content-Type': 'application/json',\n  //           },\n  //           body: JSON.stringify({\n  //             \"data\": milkData,\n  //           }),\n  //         })\n  //           .then(async (response) => {\n  //             const result = await response.json();\n  //             result.forEach((milkInDay, idx) => {\n  //               if (!Array.isArray(prediction[index])) {\n  //                 prediction[index] = []; // Initialize the array if it's not already an array\n  //               }\n  //               if (colSums[idx] !== undefined) {\n  //                 colSums[idx] += milkInDay;\n  //               }\n  //               prediction[index].push(milkInDay);\n  //             });\n  //           });\n  //       });\n\n  //       fetch(\"../api/getMilkRecords/\")\n  //         .then(async (response) => {\n  //           const result = await response.json();\n  //           let dex=0;\n  //           const aggregatedData = {};\n  //           // colSums.forEach(setv=> {\n  //           //   aggregatedData[] = {\n  //           //     label: ,\n  //           //     predicter:colSums[dex++],\n  //           //   }\n  //           // })\n  //           console.log(colSums);\n  //           result.forEach((data) => {\n  //             const datetime = moment(data.timestamp).format(\"DD-MM-YYYY\");\n  //             if (aggregatedData[datetime]) {\n  //               aggregatedData[datetime].sumweight += data.weight;\n  //             } else {\n  //               aggregatedData[datetime] = {\n  //                 label: datetime,\n  //                 real: data.weight,\n  //                 predicter: colSums[dex++],\n  //                 sumweight: data.weight,\n  //               };\n  //             }\n  //           });\n  //           console.log(aggregatedData);\n  //           // Convert the aggregatedData object into an array\n  //           const formattedData = Object.values(aggregatedData);\n  //           console.log(formattedData);\n  //           setUsers(formattedData);\n  //         })\n  //         .catch((error) => {\n  //           console.error(\"Error fetching data:\", error);\n  //         });\n  //     });\n  // };\n\n  // useEffect(() => {\n  //   fetchUserData();\n  // }, []);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontFamily: 'Athiti, sans-serif',\n      fontWeight: 'bold',\n      fontSize: '36px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"\\u0E01\\u0E23\\u0E32\\u0E1F\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E08\\u0E33\\u0E19\\u0E27\\u0E19\\u0E19\\u0E49\\u0E33\\u0E19\\u0E21\\u0E15\\u0E48\\u0E2D\\u0E27\\u0E31\\u0E19\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Milk (ml.)\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: users,\n    margin: {\n      top: 15,\n      right: 15,\n      bottom: 15,\n      left: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"label\",\n    fontSize: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    fontSize: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"sumweight\",\n    stroke: \"#237bba\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"predicter\",\n    stroke: \"#808080\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"names":["React","useState","useEffect","ResponsiveContainer","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","Legend","moment","users","label","predicter","sumweight","Graphunion","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","fontFamily","fontWeight","fontSize","width","height","data","margin","top","right","bottom","left","dataKey","stroke","strokeDasharray","type"],"sources":["C:/Users/user/OneDrive/Desktop/Project/Pdairy/frontend/src/page/page-com/graphunion.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\nimport './graph.css';\r\nimport moment from 'moment';\r\n\r\nconst users = [\r\n  { label: 'January',  predicter: 41 },\r\n  { label: 'February',  predicter: 79 },\r\n  { label: 'March',  predicter: 57 },\r\n  { label: 'April', sumweight: 0, predicter: 47 },\r\n  { label: 'May', sumweight: 41, predicter: 63 },\r\n  { label: 'June', sumweight: 47, predicter: 71 }\r\n];\r\n\r\nexport default function Graphunion() {\r\n  // const [users, setUsers] = useState([]);\r\n  // const numCols = 305;\r\n  // const colSums = new Array(numCols).fill(0);\r\n\r\n  // const fetchUserData = () => {\r\n  //   fetch(\"../api/getMilkRecords/\")\r\n  //     .then(async (res) => {\r\n  //       const milkpercow = await res.json();\r\n  //       const arrmilk = new Array(10); // Create an array with 10 rows\r\n  //       for (let i = 0; i < 10; i++) {\r\n  //         arrmilk[i] = new Array(); // For each row, create an array with no initial columns\r\n  //       }\r\n\r\n  //       let a = moment(\"09-01-2023 +0000\", \"MM-DD-YYYY Z\").valueOf();\r\n  //       let b = moment.duration(a, 'milliseconds');\r\n  //       let starto = Math.floor(b.asDays());\r\n\r\n  //       for (let i = 0; i < milkpercow.length; i++) {\r\n  //         let rower = milkpercow[i].cowID;\r\n  //         if (!Array.isArray(arrmilk[rower])) {\r\n  //           arrmilk[rower] = []; // Initialize the row if it's not already an array\r\n  //         }\r\n  //         const dmy = moment(milkpercow[i].timestamp).format(\"MM-DD-YYYY\");\r\n  //         let mill = moment(dmy, \"MM-DD-YYYY\").valueOf();\r\n  //         let duration = moment.duration(mill, 'milliseconds');\r\n  //         let coler = Math.floor(duration.asDays()) - starto;\r\n  //         arrmilk[rower][coler] = milkpercow[i].weight;\r\n  //       }\r\n\r\n  //       const prediction = new Array(10).fill(0).map(() => []);\r\n  //       arrmilk.forEach((milkData, index) => {\r\n  //         fetch(\"../ai/predict_milk\", {\r\n  //           method: \"POST\",\r\n  //           headers: {\r\n  //             'Content-Type': 'application/json',\r\n  //           },\r\n  //           body: JSON.stringify({\r\n  //             \"data\": milkData,\r\n  //           }),\r\n  //         })\r\n  //           .then(async (response) => {\r\n  //             const result = await response.json();\r\n  //             result.forEach((milkInDay, idx) => {\r\n  //               if (!Array.isArray(prediction[index])) {\r\n  //                 prediction[index] = []; // Initialize the array if it's not already an array\r\n  //               }\r\n  //               if (colSums[idx] !== undefined) {\r\n  //                 colSums[idx] += milkInDay;\r\n  //               }\r\n  //               prediction[index].push(milkInDay);\r\n  //             });\r\n  //           });\r\n  //       });\r\n\r\n\r\n  //       fetch(\"../api/getMilkRecords/\")\r\n  //         .then(async (response) => {\r\n  //           const result = await response.json();\r\n  //           let dex=0;\r\n  //           const aggregatedData = {};\r\n  //           // colSums.forEach(setv=> {\r\n  //           //   aggregatedData[] = {\r\n  //           //     label: ,\r\n  //           //     predicter:colSums[dex++],\r\n  //           //   }\r\n  //           // })\r\n  //           console.log(colSums);\r\n  //           result.forEach((data) => {\r\n  //             const datetime = moment(data.timestamp).format(\"DD-MM-YYYY\");\r\n  //             if (aggregatedData[datetime]) {\r\n  //               aggregatedData[datetime].sumweight += data.weight;\r\n  //             } else {\r\n  //               aggregatedData[datetime] = {\r\n  //                 label: datetime,\r\n  //                 real: data.weight,\r\n  //                 predicter: colSums[dex++],\r\n  //                 sumweight: data.weight,\r\n  //               };\r\n  //             }\r\n  //           });\r\n  //           console.log(aggregatedData);\r\n  //           // Convert the aggregatedData object into an array\r\n  //           const formattedData = Object.values(aggregatedData);\r\n  //           console.log(formattedData);\r\n  //           setUsers(formattedData);\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           console.error(\"Error fetching data:\", error);\r\n  //         });\r\n  //     });\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   fetchUserData();\r\n  // }, []);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12\">\r\n        <h1></h1>\r\n        <div style={{ fontFamily: 'Athiti, sans-serif', fontWeight: 'bold', fontSize: '36px' }}>กราฟแสดงจำนวนน้ำนมต่อวัน</div>\r\n        <h2></h2>\r\n      </div>\r\n      <div className=\"section col-md-6\">\r\n        <div className=\"section-title\">Milk (ml.)</div>\r\n        <div className=\"section-content\">\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <LineChart data={users} margin={{ top: 15, right: 15, bottom: 15, left: 0 }}>\r\n              <Tooltip />\r\n              <XAxis dataKey=\"label\" fontSize={16} />\r\n              <YAxis fontSize={16} />\r\n              <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n              <Legend />\r\n              <Line type=\"monotone\" dataKey=\"sumweight\" stroke=\"#237bba\" />\r\n              <Line type=\"monotone\" dataKey=\"predicter\" stroke=\"#808080\" />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}