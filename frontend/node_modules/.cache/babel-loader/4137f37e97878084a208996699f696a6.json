{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\OneDrive\\\\Desktop\\\\Project\\\\Pdairy\\\\frontend\\\\src\\\\page\\\\page-com\\\\graphfarmer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ResponsiveContainer, BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport './graph.css';\nimport moment from 'moment';\nvar data = [{\n  label: '09/2023',\n  income: 3081\n}, {\n  label: '10/2023',\n  predicter: 3201\n}, {\n  label: '11/2023',\n  predicter: 3765\n}, {\n  label: '12/2023',\n  predicter: 3205\n}, {\n  label: '01/2024',\n  predicter: 2705\n}, {\n  label: '02/2024',\n  predicter: 2402\n}, {\n  label: '03/2024',\n  predicter: 2159\n}, {\n  label: '04/2024',\n  predicter: 1634\n}, {\n  label: '05/2024',\n  predicter: 1576\n}, {\n  label: '06/2024',\n  predicter: 1402\n}];\nexport default function Graphunion() {\n  //   const [users, setUsers] = useState([]);\n  //   const numCols = 305;\n  //   const colSums = new Array(numCols).fill(0);\n  //   const lovely=new Array(10).fill(0);\n\n  //   const fetchUserData = () => {\n  //     fetch(\"../api/getMilkRecords/\")\n  //       .then(async (res) => {\n  //         const milkpercow = await res.json();\n  //         const arrmilk = new Array(10).fill(0).map(() => []); // Initialize a 2D array\n\n  //         let a = moment(\"09-2023 +0000\", \"MM-YYYY Z\").valueOf();\n  //         let b = moment.duration(a, 'milliseconds');\n  //         let starto = Math.floor(b.asMonths());\n\n  //         milkpercow.forEach((data) => {\n  //           const dmy = moment(data.timestamp).format(\"MM-YYYY\");\n  //           let mill = moment(dmy, \"MM-YYYY\").valueOf();\n  //           let duration = moment.duration(mill, 'milliseconds');\n  //           let coler = Math.floor(duration.asMonths()) - starto;\n\n  //           // Validate cowID and coler\n  //           if (\n  //             typeof data.cowID === \"number\" &&\n  //             data.cowID >= 0 &&\n  //             data.cowID < arrmilk.length &&\n  //             typeof coler === \"number\" &&\n  //             coler >= 0 &&\n  //             coler < numCols\n  //           ) {\n  //             arrmilk[data.cowID][coler] += data.weight;\n  //           }\n  //         });\n  //         console.log(arrmilk);\n\n  //         const prediction = new Array(10).fill(0).map(() => []);\n\n  //         Promise.all(arrmilk.map((milkData) =>\n  //           fetch(\"../ai/predict_milk\", {\n  //             method: \"POST\",\n  //             headers: {\n  //               'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({\n  //               \"data\": milkData,\n  //             }),\n  //           })\n  //             .then(async (response) => {\n  //               const result = await response.json();\n  //               result.forEach((milkInDay, idx) => {\n  //                 if (!Array.isArray(prediction[idx])) {\n  //                   prediction[idx] = []; // Initialize the array if it's not already an array\n  //                 }\n  //                 if (colSums[idx] !== undefined) {\n  //                   colSums[idx] += milkInDay;\n  //                 }\n  //                 prediction[idx].push(milkInDay);\n  //               });\n  //             })\n  //         ))\n\n  //           .then(() => {\n  //             fetch(\"../api/getMilkRecords/\")\n  //               .then(async (response) => {\n  //                 const result = await response.json();\n  //                 let dex = 0;\n  //                 const aggregatedData = {};\n\n  //                 let summary=0;\n  //                 for(let love=0;love<300;love++){\n  //                   summary+=colSums[love];\n  //                   if((love+1)%30==0){\n  //                     lovely.push(summary);\n  //                     summary=0;\n  //                   }\n  //                 }\n\n  //                 result.forEach((data) => {\n  //                   let datetime = moment(data.timestamp).format(\"MM-YYYY\"); // Format to month and year\n  //                   if (aggregatedData[datetime]) {\n  //                     aggregatedData[datetime].sumweight += data.weight;\n  //                   } else {\n  //                     aggregatedData[datetime] = {\n  //                       label: datetime,\n  //                       real: data.weight,\n  //                       sumweight: data.weight,\n  //                     };\n  //                     dex += 1;\n  //                   }\n  //                 });\n\n  //                 let astro;\n  //                 for (let aa = dex; aa < 10; aa++) {\n  //                   astro = moment(Object.keys(aggregatedData).slice(-1)[0], \"MM-YYYY\").add(1, 'months'); // Increment by one month\n  //                   let formattedDate = astro.format('MM-YYYY');\n  //                   aggregatedData[formattedDate] = {\n  //                     label: formattedDate,\n  //                     predicter: lovely[aa],\n  //                   };\n  //                 }\n  //                 console.log(lovely);\n  //                 console.log(aggregatedData);\n  //                 // Convert the aggregatedData object into an array\n  //                 const formattedData = Object.values(aggregatedData);\n  //                 setUsers(formattedData);\n  //               })\n  //               .catch((error) => {\n  //                 console.error(\"Error fetching data:\", error);\n  //               });\n  //           });\n  //       });\n  //   };\n\n  //   useEffect(() => {\n  //     fetchUserData();\n  //   }, []);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"textshadow\",\n    style: {\n      fontFamily: 'Athiti, sans-serif',\n      fontWeight: 'bold',\n      fontSize: '36px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, \"\\u0E01\\u0E23\\u0E32\\u0E1F\\u0E41\\u0E2A\\u0E14\\u0E07\\u0E08\\u0E33\\u0E19\\u0E27\\u0E19\\u0E40\\u0E07\\u0E34\\u0E19\\u0E15\\u0E48\\u0E2D\\u0E40\\u0E14\\u0E37\\u0E2D\\u0E19\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, \"Income (Bath)\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    data: data,\n    margin: {\n      top: 15,\n      right: 15,\n      bottom: 15,\n      left: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"label\",\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"income\",\n    fill: \"#30BE96\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"predicter\",\n    fill: \"#c7c8c9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"names":["React","useState","useEffect","ResponsiveContainer","BarChart","Bar","CartesianGrid","XAxis","YAxis","Tooltip","Legend","moment","data","label","income","predicter","Graphunion","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","fontFamily","fontWeight","fontSize","width","height","margin","top","right","bottom","left","dataKey","stroke","strokeDasharray","fill"],"sources":["C:/Users/user/OneDrive/Desktop/Project/Pdairy/frontend/src/page/page-com/graphfarmer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ResponsiveContainer, BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\nimport './graph.css';\r\nimport moment from 'moment';\r\n\r\nconst data = [\r\n  { label: '09/2023', income: 3081 },\r\n  { label: '10/2023',  predicter: 3201 },\r\n  { label: '11/2023',  predicter: 3765 },\r\n  { label: '12/2023',  predicter: 3205 },\r\n  { label: '01/2024',  predicter: 2705 },\r\n  { label: '02/2024',  predicter: 2402 },\r\n  { label: '03/2024',  predicter: 2159 },\r\n  { label: '04/2024',  predicter: 1634 },\r\n  { label: '05/2024',  predicter: 1576 },\r\n  { label: '06/2024',  predicter: 1402 },\r\n];\r\n\r\nexport default function Graphunion() {\r\n//   const [users, setUsers] = useState([]);\r\n//   const numCols = 305;\r\n//   const colSums = new Array(numCols).fill(0);\r\n//   const lovely=new Array(10).fill(0);\r\n\r\n//   const fetchUserData = () => {\r\n//     fetch(\"../api/getMilkRecords/\")\r\n//       .then(async (res) => {\r\n//         const milkpercow = await res.json();\r\n//         const arrmilk = new Array(10).fill(0).map(() => []); // Initialize a 2D array\r\n\r\n//         let a = moment(\"09-2023 +0000\", \"MM-YYYY Z\").valueOf();\r\n//         let b = moment.duration(a, 'milliseconds');\r\n//         let starto = Math.floor(b.asMonths());\r\n\r\n//         milkpercow.forEach((data) => {\r\n//           const dmy = moment(data.timestamp).format(\"MM-YYYY\");\r\n//           let mill = moment(dmy, \"MM-YYYY\").valueOf();\r\n//           let duration = moment.duration(mill, 'milliseconds');\r\n//           let coler = Math.floor(duration.asMonths()) - starto;\r\n\r\n//           // Validate cowID and coler\r\n//           if (\r\n//             typeof data.cowID === \"number\" &&\r\n//             data.cowID >= 0 &&\r\n//             data.cowID < arrmilk.length &&\r\n//             typeof coler === \"number\" &&\r\n//             coler >= 0 &&\r\n//             coler < numCols\r\n//           ) {\r\n//             arrmilk[data.cowID][coler] += data.weight;\r\n//           }\r\n//         });\r\n//         console.log(arrmilk);\r\n\r\n//         const prediction = new Array(10).fill(0).map(() => []);\r\n\r\n//         Promise.all(arrmilk.map((milkData) =>\r\n//           fetch(\"../ai/predict_milk\", {\r\n//             method: \"POST\",\r\n//             headers: {\r\n//               'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify({\r\n//               \"data\": milkData,\r\n//             }),\r\n//           })\r\n//             .then(async (response) => {\r\n//               const result = await response.json();\r\n//               result.forEach((milkInDay, idx) => {\r\n//                 if (!Array.isArray(prediction[idx])) {\r\n//                   prediction[idx] = []; // Initialize the array if it's not already an array\r\n//                 }\r\n//                 if (colSums[idx] !== undefined) {\r\n//                   colSums[idx] += milkInDay;\r\n//                 }\r\n//                 prediction[idx].push(milkInDay);\r\n//               });\r\n//             })\r\n//         ))\r\n\r\n\r\n//           .then(() => {\r\n//             fetch(\"../api/getMilkRecords/\")\r\n//               .then(async (response) => {\r\n//                 const result = await response.json();\r\n//                 let dex = 0;\r\n//                 const aggregatedData = {};\r\n                \r\n//                 let summary=0;\r\n//                 for(let love=0;love<300;love++){\r\n//                   summary+=colSums[love];\r\n//                   if((love+1)%30==0){\r\n//                     lovely.push(summary);\r\n//                     summary=0;\r\n//                   }\r\n//                 }\r\n\r\n//                 result.forEach((data) => {\r\n//                   let datetime = moment(data.timestamp).format(\"MM-YYYY\"); // Format to month and year\r\n//                   if (aggregatedData[datetime]) {\r\n//                     aggregatedData[datetime].sumweight += data.weight;\r\n//                   } else {\r\n//                     aggregatedData[datetime] = {\r\n//                       label: datetime,\r\n//                       real: data.weight,\r\n//                       sumweight: data.weight,\r\n//                     };\r\n//                     dex += 1;\r\n//                   }\r\n//                 });\r\n\r\n//                 let astro;\r\n//                 for (let aa = dex; aa < 10; aa++) {\r\n//                   astro = moment(Object.keys(aggregatedData).slice(-1)[0], \"MM-YYYY\").add(1, 'months'); // Increment by one month\r\n//                   let formattedDate = astro.format('MM-YYYY');\r\n//                   aggregatedData[formattedDate] = {\r\n//                     label: formattedDate,\r\n//                     predicter: lovely[aa],\r\n//                   };\r\n//                 }\r\n//                 console.log(lovely);\r\n//                 console.log(aggregatedData);\r\n//                 // Convert the aggregatedData object into an array\r\n//                 const formattedData = Object.values(aggregatedData);\r\n//                 setUsers(formattedData);\r\n//               })\r\n//               .catch((error) => {\r\n//                 console.error(\"Error fetching data:\", error);\r\n//               });\r\n//           });\r\n//       });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchUserData();\r\n//   }, []);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12\">\r\n        <h1></h1>\r\n        <div className=\"textshadow\" style={{ fontFamily: 'Athiti, sans-serif', fontWeight: 'bold',fontSize:'36px'}}>กราฟแสดงจำนวนเงินต่อเดือน</div>\r\n        <h2></h2>\r\n      </div>\r\n      <div className=\"section col-md-6\">\r\n        <div className=\"section-title\">Income (Bath)</div>\r\n        <div className=\"section-content\">\r\n          <ResponsiveContainer width=\"100%\" height={300}>\r\n            <BarChart data={data} margin={{ top: 15, right: 15, bottom: 15, left: 0 }}>\r\n              <XAxis dataKey=\"label\" fontSize={20}/>\r\n              <YAxis fontSize={20}/>\r\n              <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n              <Tooltip />\r\n              <Legend/>\r\n              <Bar dataKey=\"income\" fill=\"#30BE96\" />\r\n              <Bar dataKey=\"predicter\" fill=\"#c7c8c9\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}